/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
///// 
/////                              MESH GENERATOR for a cylinder
/////
/////             This file creates a mesh and an initial base flow for the "StabFem" program.
/////
/////             input parameters : Xmin Xmax Ymax
/////  			  
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

include "Macros_StabFem.edp";
//string ffdatadir = "./WORK/";

// load "iovtk"                       /// load library to write in vtk format
// load "BinaryIO"                 ////load libary to write the solution in binary form
// load "BinaryIO_64"



//real Rbody=0.5;         /////// Cylinder Rbody
 


real n=5;                 
int ns=30; 

cout << " Generation of an initial mesh for a BLUNT BODY in a PIPE" << endl;
cout << " Enter the dimensions Rbody, Rtube, Lbody, xmin, xmax ? " << endl; 

//real xinlet=-20.;     
//real xoutlet=40.; 
//real yside=20.;       
real xinlet , xoutlet, Rpipe,Lbody,Rbody ;

cin >> Rbody >> Rpipe >> Lbody >> xinlet >> xoutlet ;

cout << "DIMENSION OF THE BODY ; Rb = " << Rbody << " ; Lb = " << Lbody << endl;  
cout << "Confinement : Rtube = " << Rpipe << endl;
cout << "SIZE OF DOMAIN : Xmin = " << xinlet << " ; Xmax = " << xoutlet << endl;

/////////////////////////////////////////////////////////////////////////////////
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;
                         /////// label for boundary conditions  
/////////////////////////////////////////////////////////////////////////////////
// cylinder center is in (0,0)

//border cylinder(t=0,pi){ x=Rbody*cos(t);y=Rbody*sin(t);label=bcwall;}
border square1(t=0,pi/2){x=-Rbody*cos(t);y=Rbody*sin(t);label=21;}
border square2(t=0,Lbody){x=t;y=Rbody;label=22;}
border square3(t=Rbody,0){x=Lbody;y=t;label=23;}

//border cylref(t=0,2*pi){ x=(Rbody+RR)*cos(t);y=(Rbody+RR)*sin(t);label=999;}

border inlet(t=Rpipe,0){ x=xinlet;y=t;label=1;}
border axis1(t=xinlet,-2*Rbody){ x=t;y=0;label=6;}
border axis11(t=-2*Rbody,-Rbody){ x=t;y=0;label=6;}
border axis21(t=Lbody,Lbody+Rbody){ x=t;y=0;label=6;}
border axis2(t=Lbody+Rbody,xoutlet){ x=t;y=0;label=6;}
border outlet(t=0,Rpipe){ x=xoutlet;y=t;label=3;}
border latsup1(t=xoutlet,Lbody){x=t;y=Rpipe;label=5;}
border latsup2(t=Lbody,-Rbody){x=t;y=Rpipe;label=5;}
border latsup3(t=-Rbody,xinlet){x=t;y=Rpipe;label=5;}





/////////////////////////////////////////////////////////////////////////////////
// plot(inlet(10)+latinf(10)+outlet(10)+latsup(10)+cylref(10)+cylinder(10)+a1(10)+a2(10)+a3(10)+a4(10));
                         /////// Just to check the borders
/////////////////////////////////////////////////////////////////////////////////
// Build a mesh 

IFMACRO(freefemplots,1)
plot(inlet(Rbody*n)
	+axis1((-Rbody-xinlet)*n)+axis11(ns*Rbody)
	+axis21(ns*Rbody)+axis2((xoutlet-Lbody)*n)
	+outlet(2*Rbody*n)
	+latsup1((xoutlet-Lbody)*n)+latsup2(ns*(Rbody+Lbody))+latsup3((-Rbody-xinlet)*n)
	+square1(ns*Rbody*pi/2)+square2(ns*Lbody)+square3(ns*Rbody)
	,wait=1);
ENDIFMACRO


mesh th=buildmesh(inlet(Rbody*n)
	+axis1((-Rbody-xinlet)*n)+axis11(ns*Rbody)
	+axis21(ns*Rbody)+axis2((xoutlet-Lbody)*n)
	+outlet(2*Rbody*n)
	+latsup1((xoutlet-Lbody)*n)+latsup2(ns*(Rbody+Lbody))+latsup3((-Rbody-xinlet)*n)
	+square1(ns*Rbody*pi/2)+square2(ns*Lbody)+square3(ns*Rbody))
	;

IFMACRO(freefemplots,1)
plot(th,wait=0);
ENDIFMACRO
	
// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometrical parameters for StabFem. Problem type : " << endl;
			file << "AxiXR" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real Rbody real Lbody real Rbody real Xmin real Xmax" << endl;
			file <<  Rbody  << endl << Lbody << endl << Rbody << endl << xinlet << endl << xoutlet << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)


// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomLengthscale = 1 ; // length scale for nondimensionalization" << endl ;
            file2 << " real SFGeomVelocityscale = 1 ; // velocity scale for nondimensionalization"  << endl ;
            file2 << " real SFGeomLbody = " << Lbody  << " ; " << endl ;
            file2 << " real SFGeomRbody = " << Rbody  << " ; " << endl ;
            file2 << " real SFGeomRpipe = " << Rpipe  << " ; " << endl ;
            file2 << " string SFGeomtypeinlet = \"Constant\" ; " << endl ; 
}





// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,ur,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ur[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m",u,"BaseFlow",0);
	     


