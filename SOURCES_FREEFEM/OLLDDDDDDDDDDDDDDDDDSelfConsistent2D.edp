/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
/////            DIRECT COMPUTATION OF SELF CONSISTENT MODEL
/////				
/////		Adapted for usage with matlab driver by D. Fabre, july 2017
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//load "iovtk"                      //////// library to write vtk files
//load "BinaryIO"                //////// library to read/write binary files 
// load "BinaryIO_64"
//load "UMFPACK64"        ////////  load sparsesolver    
load "MUMPS_seq"
include "SF_Geom.edp";
include "Macros_StabFem.edp";


/////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////
//////////////////----->             parameters         <-----///////////////////
/////////////////////////////////////////////////////////////////////////////////

/*
	cout << " Enter Reynolds :   " << endl; 
	cin  >> Re;
	real nu=1.0/Re;  
	real shiftr,shifti;	
	cout << " Enter SHIFT (re,im) :   " << endl; 
	cin  >> shiftr >> shifti;
	complex shift = 1i*shifti+shiftr;
	string symmetry;
	cout << " Symmetry properties ?? (A, S or N)" << endl;
	cin >> symmetry;
	string iadjoint; // 0 for direct ; 1 for adjoint
	cout << " Direct (D) or Adjoint (A) ?" << endl;
	cin >> iadjoint;	

	int nev;
    cout << " Enter nev ? (will use simple shift-invert if nev = 1)" << endl;
    cin >> nev ;
	int ncv = 4*nev;   ///// Krylov Basis

	
	cout << " ### PARAMETERS SELECTED : " << endl;
	cout << " Re = " << Re<< endl;
	cout << " shift = " << shift << endl;
	if (symmetry =="S") {cout << " Symmetric modes" << endl;}
		else if (symmetry =="A") {cout << " Antiymmetric modes" << endl;}	
		else if (symmetry =="N") {cout << " No symmetry axis" << endl;};	
	if (iadjoint =="D") {cout << " DIRECT PROBLEM" << endl;}
		else {cout << " ADJOINT PROBLEM" << endl;};
	cout << " nev = " << nev << endl;
*/	
	



mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]);

XXMh [ub1s,ub2s,pbs]; // base flow (start) 
XXMh<complex> [um1s,um2s,pms];    //eigenmode (start)      

//BIGSPACE [u1b,u2b,pb,u1mr,u2mr,pmr,u1mi,u2mi,pmi]; // baseflow, eigenmode_re, eigenmode_im
//BIGSPACE [du1b,du2b,dpb,du1mr,du2mr,dpbmr,du1mi,du2mi,dpbmi]; // increments in Newton
//BIGSPACE [v1b,v2b,qb,v1mr,v2mr,qmr,v1mi,v2mi,qmi]; // test functions

XXMh [u1b,u2b,pb],[u1mr,u2mr,pmr],[u1mi,u2mi,pmi];
XXMh [du1b,du2b,dpb],[du1mr,du2mr,dpbmr],[du1mi,du2mi,dpbmi]; // increments in Newton
XXMh [v1b,v2b,qb], [v1mr,v2mr,qmr], [v1mi,v2mi,qmi];


real Re, ReM;
real omega, omegaM, sigmaM, domega;
     
//XXMh<complex> [u1m,u2m,pm];

//XXMh [v1,v2,q];                 ///////  -> test for Navier-Stokes
//XXMh [Ub1,Ub2,Pb];          ///////  -> Base Flow


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////  
/////////////////////////////////////////////////////////////////////////////
//cout << " -.-.-.-.-.-.-.-. info -.-.-.-.-.-.-.-.-.-" << endl;
//cout << " nb of degree of freedom : " << XXMh.ndof << endl;
//cout << " nb of Triangles: " << th.nt << endl;
//cout << " nb of Vertices: " << th.nv << endl;
//cout << " -.-.-.-.-.-.-.-._________-.-.-.-.-.-.-.-." << endl;
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

macro div(u1,u2) (dx(u1)+dy(u2)) //
macro grad(u1,u2) [dx(u1),dy(u2)] //
macro ugrad(u1,u2,v) (u1*dx(v)+u2*dy(v)) //
macro Ugrad(u1,u2,v1,v2) [ugrad(u1,u2,v1),ugrad(u1,u2,v2)] //
macro Conv(ua1,ua2,ub1,ub2,v1,v2) (Ugrad(ua1,ua2,ub1,ub2)'*[v1,v2]+Ugrad(ub1,ub2,ua1,ua2)'*[v1,v2]) // convection operator
macro Diffusion(nu,u1,u2,v1,v2)  (-(nu)*( dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))) // integration by parts of nu (v.Delta u) 

macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
// 

macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -2*nu*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
//
macro Drag(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.x)
	+int1d(th,2,21,22,23)( -2*nu*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
//

real eps=1.e-7; 
       
       
real sigma1; // parameter sigma1 from Mantic-lugo et al ; should be zero for harmonic balance
real A,dA ; // amplitude 


cout << " Choice of Re : " << endl;
cin >> Re; 
cout << " --> Re = " << Re << endl;
cout << " Choice of sigma1 :" << endl; 
cin >> sigma1 ;
cout << " --> sigma1 = " << sigma1 << endl;
cout << "Guess for Amplitude "<< endl;
cin >> A ;
cout << " --> A_guess = " << A << endl;

       
string normalisation;
cout << "Normalisation ?  [E -> Energy (Mantic-lugo et al), L -> Lift (Fabre et al) " << endl;
cin >> normalisation ;
cout << " --> " << normalisation << endl;

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow and eigenmode  for starting point     ////////////////////////
real Relu;
{
ifstream cbin(ffdatadir+"MeanFlow_guess.txt");
cbin >> ub1s[] >> Relu;
}
if(Relu!=Re){ cout << "WARNING : Re not equal to that of the guess mean flow" << endl;};

cout << "Drag of guess mean flow : " << Drag(1/Re,ub1s,ub2s,pbs) << endl;

{
		cout << "starting  from mode in file SelfConsistentMode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"SelfConsistentMode_guess.txt");
		cbin >> um1s[] >> ReM >> sigmaM >> omegaM; 
		
		
		
		if(normalisation=="L")
		{
			cout << "Lift before renarmalisation : " << Lift(1/Re,um1s,um2s,pms) << endl;
			
		complex modenorm = Lift(1/Re,um1s,um2s,pms)/.5;
		um1s[] = 1/modenorm*um1s[]; // normalize so that lift is 0.5
			cout << "Lift after renarmalisation : " << Lift(1/Re,um1s,um2s,pms) << endl;
		};
		if(normalisation=="E")
		{
		complex modenorm = Lift(1/Re,um1s,um2s,pms)/.5;
		um1s[] = 1/modenorm*um1s[]; // first normalize so that imag part of lift is zero
		modenorm = sqrt(int2d(th)(abs(um1s)^2+abs(um2s)^2)/.5);
		um1s[] = 1/modenorm*um1s[]; // then normalize so that || ums ||_L2 = 1/sqrt(2)
		};

	cout << "after renormalization : Lift(A*u1) = " <<  A*Lift(1/Re,um1s,um2s,pms) 
	<< " ; E(A*u1) = " << A*sqrt(int2d(th)(abs(um1s)^2+abs(um2s)^2)/.5) << endl << endl;
		
};
cout << " Reading baseflow and mode with Re = " << Re << " ; sigma = " << sigmaM << " ; omega = " << omegaM << endl;

//[u1b,u2b,pb,u1mr,u2mr,pmr,u1mi,u2mi,pmi] = [ub1s, ub2s, pbs, real(um1s), real(um2s), real(pms), imag(um1s), imag(um2s), imag(pms)]; 

[u1b,u2b,pb] = [ub1s, ub2s, pbs]; 
[u1mr,u2mr,pmr] = [real(um1s), real(um2s), real(pms)]; 
[u1mi,u2mi,pmi] = [imag(um1s), imag(um2s), imag(pms)]; 

real[int] X, Xf, RHS;
//BIGSPACE [RHSF1, RHSF2, RHSF3, RHSF4, RHSF5, RHSF6, RHSF7, RHSF8, RHSF9];

real NLOpF4,NLOpF5;
X  = [u1b[], Re, omega];
omega = omegaM;
//Re = ReM;

////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for MEAN flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 and 5 normalization  
// M = 1 MEAN-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega ; M=4 dA 
//
// in the assembly blocks [1-3]x[1-3]  corresponding to the fluid unknows are built with varfs NLOpF and LinOpFF 
//
/////////////////////////////////////////////////////////////////////////////////

//cout << " Taille du probleme : " << u1b[].n+2 << endl;






/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;
varf NLOpF1([du1b,du2b,dpb],[v1b,v2b,qb]) =
// block 1-1 : NS for base flow
   int2d(th)( Diffusion(1/Re,u1b,u2b,v1b,v2b)
             + pb*div(v1b,v2b)
             - div(u1b,u2b)*qb
             - .5*Conv(u1b,u2b,u1b,u2b,v1b,v2b)
             )
 			+ Boundaryconditions(du1b,du2b,v1b,v2b,"S")
 			
 // block 1-2 : nonlinear term (real parts)
    +int2d(th)(
 			- A^2*Conv(u1mr,u2mr,u1mr,u2mr,v1b,v2b)
 // block 1-3 : nonlinear term (real parts)
 			- A^2*Conv(u1mi,u2mi,u1mi,u2mi,v1b,v2b) 						
 			)
 			;
 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf NLOpF2([du1mr,du2mr,dpbmr],[v1mr,v2mr,qmr]) =
	 int2d(th)( 
                  -Conv(u1b,u2b,u1mr,u2mr,v1mr,v2mr)
             )
// block 2-2 : Stokes operator on real part of eigenmode             
           + int2d(th)( Diffusion(1/Re,u1mr,u2mr,v1mr,v2mr)
             + pmr*div(v1mr,v2mr)
             - div(u1mr,u2mr)*qmr
             - sigma1*(u1mr*v1mr+u2mr*v2mr)
             )
 			+ Boundaryconditions(du1mr,du2mr,v1mr,v2mr,"A")
// block 2-3 : effect of omega on real part of equation for eigenmode
			+ int2d(th)(omega*(u1mi*v1mr+u2mi*v2mr));
			
// block 3-1 : base-flow effect on real part of eigenmode	
varf NLOpF3([du1mi,du2mi,dpbmi],[v1mi,v2mi,qmi]) =		
	  int2d(th)( 
                  - Conv(u1b,u2b,u1mi,u2mi,v1mi,v2mi)
              )   
// block 3-2 : effect of omega on real part of equation for eigenmode
			+ int2d(th)(-omega*(u1mr*v1mi+u2mr*v2mi)) 			
// block 3-3 : Stokes operator on real part of eigenmode             
           + int2d(th)( Diffusion(1/Re,u1mi,u2mi,v1mi,v2mi)
             + pmi*div(v1mi,v2mi)
             - div(u1mi,u2mi)*qmi
             - sigma1*(u1mi*v1mi+u2mi*v2mi)
             )
 			+ Boundaryconditions(du1mi,du2mi,v1mi,v2mi,"A")
 			;

// blocks 4 and 5 : normalisation of eigenmode by lift=.5
// NLOpF4 = Lift(1/Re,u1mr,u2mr,pmr)-.5; 
// NLOpF4 = int2d(th)(u1mrs^2+u1mi^2+u2mr^2+u2mi^2)-.5;

// NLOpF5 = Lift(1/Re,u1mi,u2mi,pmi)-0; 	
// these have to be defined later, when assemblying the matrix		
cout << " defining operators for nonlinear term... done" << endl;

	







/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for linear term..." << endl;
// block 1-1 : NS for base flow
varf LinOp11([du1b,du2b,dpb],[v1b,v2b,qb]) =
   int2d(th)( Diffusion(1/Re,du1b,du2b,v1b,v2b)
             + dpb*div(v1b,v2b)
             - div(du1b,du2b)*qb
             - Conv(u1b,u2b,du1b,du2b,v1b,v2b)
             )
 			+ Boundaryconditions(du1b,du2b,v1b,v2b,"S");

// block 1-2 : nonlinear term (real parts)
varf LinOp12([du1mr,du2mr,dpmr],[v1b,v2b,qb]) =
      int2d(th)(
	  -2*A^2*Conv(u1mr,u2mr,du1mr,du2mr,v1b,v2b)
	  );

// block 1-3 : nonlinear term (real parts)
varf LinOp13([du1mi,du2mi,dpmi],[v1b,v2b,qb]) =
	  int2d(th)(
	  -2*A^2*Conv(u1mi,u2mi,du1mi,du2mi,v1b,v2b)	  
 		);
 			
// block 1-4 : effect of dA on base-flow equations
varf LinOp14([du1b,du2b,dpb],[v1b,v2b,qb])
	= int2d(th)(
	-2*A*(Conv(u1mr,u2mr,u1mr,u2mr,v1b,v2b)+Conv(u1mi,u2mi,u1mi,u2mi,v1b,v2b)) );

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21([du1b,du2b,dpb],[v1mr,v2mr,qmr]) =
	 int2d(th)( 
                  - Conv(du1b,du2b,u1mr,u2mr,v1mr,v2mr)
             );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22([du1mr,du2mr,dpmr],[v1mr,v2mr,qmr]) =
             int2d(th)( Diffusion(1/Re,du1mr,du2mr,v1mr,v2mr)
             + dpmr*div(v1mr,v2mr)
             - div(du1mr,du2mr)*qmr
             - Conv(u1b,u2b,du1mr,du2mr,v1mr,v2mr)
             - sigma1*(du1mr*v1mr+du2mr*v2mr)
             )
 			+ Boundaryconditions(du1mr,du2mr,v1mr,v2mr,"A");
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23([du1mi,du2mi,dpmi],[v1mr,v2mr,qmr]) =
			 int2d(th)(omega*(du1mi*v1mr+du2mi*v2mr));

// block 2-4 : NO effect of dA on eigenmode-imag equations

// block 2-5 : effect of domega on eigenmode-real equations
varf LinOp25([du1b,du2b,dpb],[v1mr,v2mr,qmr])
	=  int2d(th)(u1mi*v1mr+u2mi*v2mr);


// block 3-1 : base-flow effect on real part of eigenmode			
varf LinOp31([du1b,du2b,dpb],[v1mi,v2mi,qmi]) =
	 int2d(th)( 
                  - Conv(du1b,du2b,u1mi,u2mi,v1mi,v2mi)
              );
              
// block 3-2 : effect of omega on real part of equation for eigenmode
varf LinOp32([du1mr,du2mr,dpmr],[v1mi,v2mi,qmi]) =
			 int2d(th)(-omega*(du1mr*v1mi+du2mr*v2mi));
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33([du1mi,du2mi,dpmi],[v1mi,v2mi,qmi]) =
             int2d(th)( Diffusion(1/Re,du1mi,du2mi,v1mi,v2mi)
           - Conv(u1b,u2b,du1mi,du2mi,v1mi,v2mi)
             + dpmi*div(v1mi,v2mi)
             - div(du1mi,du2mi)*qmi
               - sigma1*(du1mi*v1mi+du2mi*v2mi)
             )
 			+ Boundaryconditions(du1mi,du2mi,v1mi,v2mi,"A")
 			;

// block 3-4 : NO effect of dA on eigenmode-imag equations		
	
// block 3-5 : effect of domega on eigenmode-imag equations
varf LinOp35([du1b,du2b,dpb],[v1mi,v2mi,qmi])
	= int2d(th)(-(u1mr*v1mi+u2mr*v2mi));





//real LinOp44 = Lift(-1/Re^2,u1mr,u2mr,0);
//real LinOp54 = Lift(-1/Re^2,u1mi,u2mi,0);
//matrix LinOp = [[matLinOpFF, matLinOpF4,matLinOpF5], [matLinOp4F',0, LinOp45],[matLinOp5F',0, LinOp45]];
cout << " defining operators for linear term... done" << endl;




///// BEGINING OF NEWTON LOOP
domega = 1;

int i=1;
while(abs(domega)>1e-8&&abs(domega)<10)
	{ 
	cout << "Newton loop step " << i << endl;

	cout << "constructing rhs... " << i << endl;
	real[int] RHSF1(u1b[].n), RHSF2(u1b[].n), RHSF3(u1b[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);	
	real NLOpF4,NLOPF5;
	if(normalisation=="L")
		{
		NLOpF4 = Lift(1/Re,u1mr,u2mr,pmr)-0.5; 
		};
	if(normalisation=="E")
		{
		NLOpF4 = int2d(th)(u1mr^2+u1mi^2+u2mr^2+u2mi^2)-.5;
		};
	NLOpF5 = Lift(1/Re,u1mi,u2mi,pmi)-0; 	
	RHS = [RHSF1, RHSF2, RHSF3, NLOpF4, NLOpF5];		
	cout <<  "max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << NLOpF4 <<  ", " << NLOpF5 << endl;
	
/*	XXMh [RHSu,RHSv,RHSp];
	
	RHSu[] = RHSF1;
	plot(RHSu,wait=0,fill=1,value=1,cmm="RHS u for term 1");
	plot(RHSv,wait=0,fill=1,value=1,cmm="RHS v for term 1");
	plot(RHSp,wait=0,fill=1,value=1,cmm="RHS p for term 1");
	
	RHSu[] = RHSF2;
	plot(RHSu,wait=0,fill=1,value=1,cmm="RHS u for term 2");
	plot(RHSv,wait=0,fill=1,value=1,cmm="RHS v for term 2");
	plot(RHSp,wait=0,fill=1,value=1,cmm="RHS p for term 2");
*/

	cout << "dimensions of the operator and of the RHS : " << RHS.n <<  endl;
	
	
	cout << " Assembling matrix..." << endl;
matrix matLinOp11 = LinOp11(XXMh,XXMh);
matrix matLinOp12 = LinOp12(XXMh,XXMh);
matrix matLinOp13 = LinOp13(XXMh,XXMh);
real[int] matLinOp14 = LinOp14(0,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
//real[int] matLinOp24 = LinOp24(0,XXMh);
real[int] matLinOp25 = LinOp25(0,XXMh);

matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
//real[int] matLinOp34 = LinOp34(0,XXMh);
real[int] matLinOp35 = LinOp35(0,XXMh);			



real[int] matLinOp42(matLinOp14.n), matLinOp43(matLinOp14.n);

/// LINE 4 : Normalisation of the eigenmode

/// FIRST METHOD 
if(normalisation=="L")
{
// block 4-2 : lift of real part of eigenmode
    varf LinOp42([v1b,v2b,qb],[du1mr,du2mr,dpmr])	
	= Lift(1/Re,du1mr,du2mr,dpmr);
	varf LinOp43([v1b,v2b,qb],[du1mi,du2mi,dpmi]) 
	= int2d(th)(0*du1mi);
	matLinOp42 = LinOp42(0,XXMh);
    matLinOp43 = LinOp43(0,XXMh);
};

if(normalisation=="E")
{
// block 4-2 : ENERGY
    varf LinOp42([v1b,v2b,qb],[du1mr,du2mr,dpmr])	
	= int2d(th)(2*u1mr*du1mr+2*u2mr*du2mr);
    varf LinOp43([v1b,v2b,qb],[du1mi,du2mi,dpmi])	
	= int2d(th)(2*u1mi*du1mi+2*u2mi*du2mi);
	matLinOp42 = LinOp42(0,XXMh);
    matLinOp43 = LinOp43(0,XXMh);
};

/// LINE 5 : to fix the phase
// block 5-3 : lift of imaginary part of eigenmode
varf LinOp53([v1b,v2b,qb],[du1mi,du2mi,dpmi])	
	= Lift(1/Re,du1mi,du2mi,dpmi);
	
real[int] matLinOp53 = LinOp53(0,XXMh);

//real LinOp44,LinOp54;
//if(normalisation=="L")
//{
//LinOp44 = Lift(-1/Re^2,u1mr,u2mr,0);
//LinOp54 = Lift(-1/Re^2,u1mi,u2mi,0);
//};
//if(normalisation=="E")
//{
//LinOp44 = 0;
//LinOp54 = Lift(-1/Re^2,u1mi,u2mi,0);
//};

matrix LinOp = [	[matLinOp11, matLinOp12, matLinOp13, 	matLinOp14, 	  0    ],
					[matLinOp21,matLinOp22,  matLinOp23,	0 , 		matLinOp25 ],
					[matLinOp31,matLinOp32, matLinOp33,		0, 			matLinOp35 ],
					[	0	   ,matLinOp42', matLinOp43',	0, 		0 ],
					[	0	   ,	0		,matLinOp53',   0,		0  ]	  
				  ];
cout << " Assembling matrix... done" << endl;


cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " LU-ing matrix... done" << endl;

	

	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	dX = -dX;
	[du1b[], du1mr[], du1mi[], dA, domega] = dX;
	u1b[] += du1b[];
	u1mr[] += du1mr[];
	u1mi[] += du1mi[];
	A += dA;
	omega += domega;

	cout << "dA ; domega : " << dA << " " << domega << endl;
	cout << "A ; omega : " << A << " " << omega << endl;
	plot(u1b,cmm="mean flow approximation iteration "+i, fill=1,value=1,wait=0);


	i++;
	};
	

	
	if(abs(domega)>10) 
	{
	
	ofstream file("MeanFlow.ff2m");
	file << "### Data generated by Freefem++ ; " << endl;
    file << "MeanFlow" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	cout << " Newton Loop DIVERGED " << endl;	
	}
	
	else
	{
	cout << " SC MODEL : Newton Loop converged in " << i << " iterations " << endl;
	cout << " >>> A = " << A << endl;
	cout << " >>> Omegac = " << omega << endl;	
	
	
		real Vx07y0 = abs(u2mr(0.7,0)^2+u2mi(0.7,0)^2);


	cout << endl << " Vx07y0 = " <<  Vx07y0 << endl;
	
	
/// GENERATES OUTPUT FILES


real nu=1/Re;

{ofstream file(ffdatadir+"MeanFlow.txt");
		  file << u1b[]; 
		  file << endl << endl << Re;
}; 


cout << "Drag of guess mean flow : " << Drag(1/Re,u1b,u2b,pb) << endl;


{
	ofstream file(ffdatadir+"MeanFlow.ff2m");
	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
	p1 u1=u1b;
	p1 u2=u2b;
	p1 p=pb;
	real Rpipe = yy[].max;
	    file << "### Data generated by Freefem++ ; " << endl;
    file << "MeanFlow" << endl;
    file << "Format : " << endl;	
	file << "real Re P1 ux P1 uy P1 p ";
	file << "int iter " ;
	file << " real Drag real Lx" << endl << endl;// customisable output
//	file << PostProcessBaseFlowDescription << endl << endl ; // customisable output ; according to definition in Params_StabFem.edp
	file << Re << endl;	
			{
			for (int j=0;j<u1[].n ; j++) file << u1[][j] << endl;
			for (int j=0;j<u1[].n ; j++) file << u2[][j] << endl;
			for (int j=0;j<u1[].n ; j++) file << p[][j] << endl;
		//	for (int j=0;j<ut[].n ; j++) file << vort[][j] << endl;
		//	for (int j=0;j<ut[].n ; j++) file << psi[][j] << endl;
			file << endl << i << endl;
			
			
//			PostProcessBaseFlowOutput(file); // customisable output ; according to definition in Params_StabFem.edp
			
			// calcul de la trainee du champ de base
			
			 real DragZZ = Drag(nu,u1,u2,p);
			cout << "#### BLUFF BODY : " << endl; 
			cout << "#    Drag =  " << DragZZ << endl << endl;
    		file << DragZZ << endl;

			
			// mesure de la longueur de recirculation
			real dx = 0.001;real Uav = -2;real Uap=-1;int ix;
			for(ix=1;ix<20000;ix++)
			{   
				Uap =u1(0.5+ix*dx,0);
				if(Uap*Uav<0){break;}; // break
				Uav = Uap;
				
			}
			real xav = 0.5+(ix-1)*dx; 
			real xap = 0.5+ix*dx;
			real Lx = xav *(Uap)/(Uap-Uav) + xap *(-Uav)/(Uap-Uav);
			cout << "#    Recirculation length = " << Lx << endl; 
			file << Lx << endl;
			
		}; 
	}


    [um1s,um2s,pms] = [u1mr+1i*u1mi,u2mr+1i*u2mi,pmr+1i*pmi]; 
//	um1s[] = u1mr[]+1i*u1mi[];

	cout << "#### measure of MODE amplitude : " << endl;
	real Energiemode = A^2*int2d(th)(u1mr^2+u1mi^2+u2mr^2+u2mi^2)*2;
	real Aenergie = sqrt(Energiemode);
	real ALift = 2*A*Lift(nu,u1mr,u2mr,pmr);
	cout << "# Aenergie = " << Aenergie << endl;
	cout << "# ALift = " << ALift << endl;

    {
    	//cout << um2s(1,1) << " " << um1s(1,1) << endl;
    		cout << "Lift after convergence : " << Lift(1/Re,um1s,um2s,pms) << endl;
    	
    ofstream file(ffdatadir+"SelfConsistentMode.txt");

  	file << um1s[] ;	
   	file << endl << endl << Re << endl
   	<< endl << sigma1 << "   " << omega  << endl;
    }
	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,uy1,pp1,vort1;

 		 {cout << "Writing SCmode in file SelfConsistentMode.ff2m" << endl;
 		 ofstream fileFF(ffdatadir+"SelfConsistentMode.ff2m");
 		 fileFF << "### Data generated by Freefem++ ; " << endl;
    	 fileFF << "SelfConsistentMode" << endl;
    	 fileFF << "Format :" << endl;
	     fileFF << "real Re  complex sigma int iter real A real Lift real Aenergy P1c ux1 P1c uy1 P1c p1" << endl << endl ; 
	     
	     
		 fileFF << Re  << endl << sigma1 << " " << omega  
	 			<< " " << i << " " << A << " " << ALift << " " << Aenergie << endl << endl;
 		ux1=u1mr+1i*u1mi;
		uy1=u2mr+1i*u2mi;
		pp1=pmr+1i*pmi;
		//vort1=dy(u1mr)-dx(u2mr)+1i*(dy(u1mi)-dx(u2mi));
		for (int j=0;j<ux1[].n ; j++) fileFF << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) fileFF << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) fileFF << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		//for (int j=0;j<ux1[].n ; j++) fileFF << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
 		 };
	



	}









/*



 			
////// BUILD OP-MATRIX=A-sigma*B //////////////////////////////////////////////////////////////
matrix<complex> OP;
complex shiftOP;
if(iadjoint=="D")
{
OP=LNSE(XXMh,XXMh,solver=sparsesolver);
shiftOP = shift;
}
else
{
OP=LNSEadjoint(XXMh,XXMh,solver=sparsesolver);
shiftOP = conj(shift);
};
////////////////////////////////////////////////////////////////////////////////////


////// BUILD B-MATRIX //////////////////////////////////////////////////////////////
	varf b([u1,u2,p],[v1,v2,q]) = int2d(th)( (u1*v1+u2*v2+p*q*0.0) );
		matrix<complex> B= b(XXMh,XXMh,solver=CG);  //////// see freefem++doc.pdf for the solver 
////////////////////////////////////////////////////////////////////////////////////





complex[int] ev(nev);                     ////// vector to store eigenvalues
XXMh<complex> [int] [eu1,eu2,eup](nev);   ////// vector to store EIGENVECTORS 





/// SOLUTION AND POSTPROCESSING FOR NEV>1 (built-in eigenvalue solver)


if(nev>1)

{

///////////////////// CALL TO ARPACK++ ////////////////////////////////// //////////
int k=EigenValue(OP,B,sigma=shiftOP,value=ev,vector=eu1,tol=1e-6,maxit=0,ncv=ncv);    //Arpack call
if(iadjoint=="D") { ev = conj(ev); } ;
////////////////////////////////////////////////////////////////////////////////////


	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,uy1,pp1,vort1;
	
    string namefile;
    
    if(iadjoint=="D"){namefile="Eigenvalues.txt";}
    else {namefile="EigenvaluesA.txt";};
    
    
    ofstream fileVP1(namefile); 
	for (int i=0;i<nev;i++)
	{
       fileVP1 << real(ev[i]) << " " << imag(ev[i]) << " " << Re << " " << 0 << " " << real(shift) << " " << imag(shift) << endl;
       	cout << " valeur propre : " << i+1 << "  : " << ev[i] << endl;
		{
 		 if(iadjoint=="D"){namefile="Eigenmode"+(i+1)+".ff2m";}
 		 else{namefile="EigenmodeA"+(i+1)+".ff2m";};
 		 cout << "Writing eigenmode in file " << namefile << endl;
 		 ofstream file(namefile);
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "EIGENMODE for the flow around a 2D cylinder" << endl;
    	 file << "Format :" << endl;
	     file << "real Re  complex sigma complex shift P1c ux1 P1c uy1 P1c p1 P1c vort1" << endl << endl ; 
		 file << Re  << endl << real(ev[i]) << " " << imag(ev[i]) << " " << shiftr << " " << shifti << endl << endl;
 		ux1=eu1[i];
		uy1=eu2[i];
		pp1=eup[i];
		vort1=dy(eu1[i])-dx(eu2[i]);
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		};
	};
	cout << "it's done" << endl;
}



////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////


else

/// SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED
{
XXMh<complex> [u10,u20,p0]; 

{

int testCB = exec("ls Eigenmode_guess.txt");
    	if (testCB!=0)
		{
		cout << "no file Eigenmode_guess.txt : strarting from arbitrary initial condition" << endl;
		[u10,u20,p0] = [1,0,0];
		} 
		else
		{
		cout << "starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin("Eigenmode_guess.txt");
		cbin >> u10[];
};
		




	int itmax = 30;
	complex sigma0 = 1e6;
	real err = 1e6;
	real errmax=1e-6;
	complex sigma;
	
	varf brhs([u1,u2,p],[v1,v2,q]) = int2d(th)( (u10*v1+u20*v2) );
	set(OP,solver=sparsesolver);  //// factorize matrix
	
/// ITERATION LOOP
int i;
	for (i=0; ((err>errmax)&&(i<itmax)); i++)
	{
	//	complex[int] rhs = B*u10[];
	
    complex[int] rhs= brhs(0,XXMh);  //////// see freefem++doc.pdf for the solver 

		complex[int] w = OP^-1*rhs;
		u1[] = w;
	
	complex XnXn1 = int2d(th)(u10*u1+u20*u2);
	complex Xn1Xn1 =  int2d(th)(u1*u1+u2*u2);
	complex GG = Xn1Xn1/XnXn1;
// at each step the inverse shifted eigenval. is approximated by <X_{n+1}, Y> / <X_n, Y>
//      ( the choice Y = X_{n+1} is convenient but we could choose something else )
	sigma = shiftOP+1/GG;
	err = abs(sigma-sigma0);
	cout << " iteration " << i+1 << " : " << endl;	
//	cout << " GG = " << GG << endl;
//	cout << " XnXn = " << XnXn << endl;
	cout << " estimated eigenvalue sigma = " << sigma << endl;	
	
	u10[] = 1/sqrt(abs(Xn1Xn1))*u1[];
	sigma0 = sigma;
	}
/// END ITERATION LOOP	

if(iadjoint=="A"){sigma=conj(sigma);};
 
if(i<itmax) 
{	

real sigmar = real(sigma) ; real sigmai = imag(sigma);
string namefile;
{
    if(iadjoint=="D")
    {ofstream file("Eigenvalues.txt");
           file << sigmar << " " << sigmai << " " << Re <<  " " << real(shift) << " " << imag(shift) << endl;
    };
    if(iadjoint=="A")
    {ofstream file("EigenvaluesA.txt");
           file << sigmar << " " << sigmai << " " << Re << " " << real(shift) << " " << imag(shift) << endl;
    };
}

{
    if(iadjoint=="D"){namefile="Eigenmode.txt";}
 		 else{namefile="EigenmodeA.txt";};
 	cout << "Writing eigenmode in file " << namefile << endl;
    ofstream file(namefile);
  	file << u1[] ;	
   	file << endl << endl << Re << endl
   	<< endl << sigmar << "   " << sigmai  << endl;
}

if (testCB==0)
		{
		exec("rm Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
		};
		
	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,uy1,pp1,vort1;

	{
 		 if(iadjoint=="D"){namefile="Eigenmode.ff2m";}
 		 	else{namefile="EigenmodeA.ff2m";};
 		 cout << "Writing eigenmode in file " << namefile << endl;
 		 ofstream file(namefile);
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << "EIGENMODE for the flow around a 2D cylinder" << endl;
    	 file << "Format :" << endl;
	     file << "real Re  complex sigma complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1" << endl << endl ; 
		 file << Re  << endl << real(sigma) << " " << imag(sigma) << " "  << shiftr << " " << shifti << " " << i << " " << endl << endl;
 		ux1=u1;
		uy1=u2;
		pp1=p;
		vort1=dy(u1)-dx(u2);
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		};

	};
}

};








//}


// NEXT IS INITIAL POST-PROCESSING OF VINCENZO ET AL
/*
int index=0;
cout << "Mode index [?]: ";
cin >> index ;         //input from keyboard
index=index-1;
exec("mkdir -v MODES");

[Ub1,Ub2,Pb]=[real(eu1[index]),real(eu2[index]),real(eup[index])];    //real part 

{
ofstream realout("./MODES/REALCylRe"+Re+".txt");      
realout << Ub1[];
};

[Ub1,Ub2,Pb]=[imag(eu1[index]),imag(eu2[index]),imag(eup[index])];    //imag part
{
ofstream imagout("./MODES/IMAGCylRe"+Re+".txt");
imagout << Ub1[];
};

//////////////////////////////////// SAVE SPECTRUM /////////////////////////////////

{
  ofstream fileSpectra("MODES/Spectra.out",append);
  //  fileSpectra.precision(12);         // set the number of digits to 12 
  for (int ij=0;ij<k;ij++)
   {
    fileSpectra  << Re << " " << real(ev[ij]) << " " << imag(ev[ij]) << endl;
   };
};
*/


