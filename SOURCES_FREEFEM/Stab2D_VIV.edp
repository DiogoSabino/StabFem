/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
/////	FEM : Flow past a SPRING-MOUNTED circular cylinder  
/////	FORMULATION : RELATIVE VELOCITIES / RELATIVE FRAME (cf assemat et al.)
/////                        
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//load "iovtk"                      //////// library to write vtk files
//load "BinaryIO"                //////// library to read/write binary files 
// load "BinaryIO_64"
//load "UMFPACK64"        ////////  load sparsesolver    
load "MUMPS_seq"

include "SF_Geom.edp";
include "Macros_StabFem.edp";

real Re, nu, MASS, STIFFNESS, DAMPING,shiftr,shifti;
real zero = 0;
complex SHIFT,shiftOP;
string symmetry="a",iadjoint="a",formulation="a", typeDA; //initialisation
int nev,ncv; // number of eigenvalues to compute ; Krylov Basis
real eps=1e-30;
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////    Parameters    ////////////////////////////////////////////////////	
	
bool exitt=false;
 
while(exitt==false)
{
	cout << " Enter Reynolds :   " << endl; 
	cin  >> Re;
	nu=1.0/Re;

	cout << " Enter MASS :   " << endl;
	cin  >> MASS;
	cout << " Enter STIFFNESS :   " << endl; 
	cin  >> STIFFNESS;
	cout << " Enter DAMPING coeff :   " << endl; 
	cin  >> DAMPING;
	cout << " Enter SHIFT (re,im) :   " << endl;
	cin  >> shiftr >> shifti;
	SHIFT = 1i*shifti+shiftr;
	
	symmetry="a";
	while(symmetry!="A"&&symmetry!="S"&&symmetry!="N"&&symmetry!="restart")
	{
		cout << " Symmetry properties ?? (A, S or N or restart)" << endl;
		cin >> symmetry;
		
	}
	if(symmetry=="restart"){continue;}

	iadjoint="a";
	while(iadjoint!="D"&&iadjoint!="A"&&iadjoint!="cA"&&iadjoint!="S"&&iadjoint!="cS"&&iadjoint!="restart")
	{
		cout << " Direct (D), Adjoint (A), continuous adjoint (cA) or D&A+sensitivity (S), D&A(c)+sentitivity (cS)  ? (or restart)" << endl;
		cin >> iadjoint;
	}
	if(iadjoint=="restart"){continue;}	

	cout << " Enter nev ? (will use simple shift-invert if nev = 1) " << endl;
	cin >> nev ;
	ncv = 4*nev; ///// Krylov Basis		//UNDERSTAND THIS

	formulation="a";
	while(formulation!="A"&&formulation!="R"&&formulation!="restart")
	{
		cout << "Formulation ?  [ A -> Absolute velocity in relative frame] [ R -> Relative velocity in relative frame][ restart -> restart]"<< endl; 
		cin >> formulation;
	}
	if(formulation=="restart"){continue;}else{exitt=true;}
}
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////     Display      ////////////////////////////////////////////////////	

cout << " ### PARAMETERS SELECTED : " << endl;
cout << " Re = " << Re<< endl;
cout << " shift = " << SHIFT << endl;
cout << " mass = " << MASS << endl;
real mstar=4*MASS/pi;
cout << " mstar = " << mstar << endl;
cout << " STIFFNESS = " << STIFFNESS << endl;
if (STIFFNESS !=0){
	real Ustar=pi*sqrt(pi*mstar/STIFFNESS);
	cout << " Ustar = " << Ustar << endl;}
else {cout << " Unable to compute Ustar" << endl;}

cout << " DAMPING = " << DAMPING << endl;
if (symmetry =="S") {cout << " Symmetric modes" << endl;}
else if (symmetry =="A") {cout << " Antiymmetric modes" << endl;}	
else if (symmetry =="N") {cout << " No symmetry axis" << endl;};	
	
if (iadjoint =="D") {cout << " DIRECT PROBLEM" << endl;}
else if (iadjoint =="A") {cout << " ADJOINT PROBLEM(discrete)" << endl;}
else if (iadjoint =="cA") {cout << " ADJOINT PROBLEM (continuous)" << endl;}
else if (iadjoint =="S") {cout << " DIRECT+ADJOINT(discrete) PROBLEM INCLUDING SENSITIVITY" << endl;}
else if (iadjoint =="cS") {cout << " DIRECT+ADJOINT (continuous) PROBLEM INCLUDING SENSITIVITY" << endl;}
else {cout << " ERROR WHEN SELECTING PROBLEM TYPE" << endl;}
;

	
cout << " nev = " << nev << endl;
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////////   Read Mesh  & FEM Variables    ////////////////////////////////////////	
mesh th=readmesh(ffdatadir+"mesh.msh");
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;

fespace Xh(th,P2);		////// f.e. space for vel.
fespace Mh(th,P1);		////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]);	////// f.e. space for triplet [u,v,p]
XXMh<complex> [ux,uy,up];	///////  -> unknown for the Navier-Stokes problem 
XXMh [vx,vy,q];			///////  -> test for Navier-Stokes
XXMh [Ubx,Uby,Pb];		///////  -> Base Flow

/////////////////////////////////////////////////////////////////////////////////
////////////////   Info      ////////////////////////////////////////////////////
//cout << " -.-.-.-.-.-.-.-. info -.-.-.-.-.-.-.-.-.-" << endl;
//cout << " nb of degree of freedom : " << XXMh.ndof << endl;
//cout << " nb of Triangles: " << th.nt << endl;
//cout << " nb of Vertices: " << th.nv << endl;
//cout << " -.-.-.-.-.-.-.-._________-.-.-.-.-.-.-.-." << endl;

/////////////////////////////////////////////////////////////////////////////////
////////////////  Macros       //////////////////////////////////////////////////
macro div(u) (dx(u#x)+dy(u#y))
// macro for divergence
 
macro Conv(ua,ub,v) ( 
	((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
	+ ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    )
// macro for mutual convection operator

macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
// macro for rate-of-deformation tensor

/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow   ////////////////////////////////////////////////////
ifstream cbin(ffdatadir+"BaseFlow.txt");
cbin >> Ubx[];

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////// BUILD B-MATRIX ///////////////////////////////////////////////////////////
//Matrix B for fixed cylinder
varf b([ux,uy,up],[vx,vy,q]) = int2d(th)( (ux*vx+uy*vy+up*q*eps) );
matrix<complex> BFluid = b(XXMh,XXMh,solver=sparsesolver);  

/////////////////////////////////////////////////////////////////////////////////
// Terms of Matrix B for VIV cylinder
matrix<complex> B = 
		[ 	[BFluid, 0,	0,	0],
			[0,	1,	0,	0],
			[0,	0,	1,	0],
			[0,	0,	0,	eps]	//TERME DE STABILIZATION
		];
set(B,solver=sparsesolver);


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
////// BUILD A-MATRIX ///////////////////////////////////////////////////////////

//varf for generalized eigenvalue problem: 
varf   LNSE ([ux,uy,up],[vx,vy,q]) =
	int2d(th)( 
		- Conv(u,Ub,v)		//Terme 2
		+ up*div(v)		//Terme 3
		-2*nu*(D(u):D(v))	//Terme 4
		+ div(u)*q		//Terme 5
		+ up*q*(eps) 		//Terme Stabilization
             )
	+ int2d(th)( -SHIFT*(ux*vx+uy*vy+up*q*eps) ) //For taking into acound the shift in B matrix
 	+BoundaryconditionsLNSE(u,v,formulation);

varf   LNSEadjointDiscrete ([ux,uy,up],[vx,vy,q]) =
	int2d(th)( 
		- Conv(v,Ub,u)		//Terme 2: 	THIS CHANGED
		+ up*div(v)		//Terme 3
		-2*nu*(D(u):D(v))	//Terme 4	/*Diffusion(nu,ux,uy,vx,vy)*//*
		+ div(u)*q		//Terme 5
		+ up*q*(eps)		//Terme Stabilization
             )
	+ int2d(th)( -conj(SHIFT)*(ux*vx+uy*vy+up*q*eps) ) 
// warning that shift/eigenvalues of adjoint are complex conjugates of direct !
	+BoundaryconditionsLNSE(u,v,formulation); //DIOGO

varf   LNSEadjointContinuous ([ux,uy,up],[vx,vy,q]) =
	int2d(th)( 
		- Conv(v,Ub,u)		//Terme 2: 	THIS CHANGED
		+ up*div(v)		//Terme 3
		-2*nu*(D(u):D(v))	//Terme 4	/*Diffusion(nu,ux,uy,vx,vy)*/
		- div(u)*q		//Terme 5
		+ up*q*(eps)		//Terme Stabilization
             )
	+ int2d(th)( -conj(SHIFT)*(ux*vx+uy*vy+up*q*eps) ) 
// warning that shift/eigenvalues of adjoint are complex conjugates of direct !
	+BoundaryconditionsLNSE(u,v,formulation); //DIOGO

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//Matrix A for fixed cylinder     //////////////////////////////////////////////////
matrix<complex> OPff;

//if(iadjoint=="D")	{OPff=LNSE(XXMh,XXMh,solver=sparsesolver); shiftOP=SHIFT; };
//else if(iadjoint=="A")	{OPff=LNSEadjointDiscrete(XXMh,XXMh,solver=sparsesolver); }
//else if(iadjoint=="cA")	{OPff=LNSEadjointContinuous(XXMh,XXMh,solver=sparsesolver); }
//else if(iadjoint=="S"||iadjoint=="cS") { cout << " WARNING : in this program option S will work only for nev=1" << endl; }
 

////////////////////////////////////////////////////////////////////////////////////
//Matrix Afv for VIV cylinder		////////////////////////////////////////////
varf afv([vx,vy,q],[ux,uy,up]) = Portance(u,"A"); //We seek just the A modes, for the linear analysis
// effet du fluide sur la vitesse v ; correspond Ã  la force verticale
// WARNING : c'est un vecteur LIGNE, il faut intervertir les inconnues et les fcns tests !
complex[int] Afv = afv(0,XXMh); // maniere de construire un vecteur COLONNE qui sera ensuite transpose

//if(iadjoint=="A"||iadjoint=="cA"){ Afv = conj(Afv);};

////////////////////////////////////////////////////////////////////////////////////
//Matrix Avf and Aaf for VIV cylinder         //////////////////////////////////////
complex[int] Avf(ux[].n);

varf avbfluid([ux,uy,up],[vx,vy,q]) = //utiliser les fonctions u comme fonctions testes
		int1d(th,bcwall)(-vy*TGVCL*(formulation=="A"))		//plus le terme AAA de interaction sur OPff 
		+int1d(th,bcinlet,bclat) (vy*TGVCL*(formulation=="R"))	//plus le terme BBB de interaction sur OPff
		+int2d(th)( ( vx*dy(Ubx)+vy*dy(Uby) )*(formulation=="A")); //convection Term in Absolute formulation. See Report Diogo2018

Avf = avbfluid(0,XXMh);

complex[int] Aaf(ux[].n);

varf afbfluid([ux,uy,up],[vx,vy,q]) =
		int2d(th)(-vy*(formulation=="R")); // Attention: signal it's a minus

Aaf = afbfluid(0,XXMh); 

////////////////////////////////////////////////////////////////////////////////////
//Matrix A for VIV cylinder   	 	 ///////////////////////////////////////////
cout << "TOTO2" << endl;
matrix<complex> OP;// mat OP = A - shift B
//OP = A+ (-SHIFT)*B; // Dont use it, because A and B are stored differently=>doesnt work


/*if(iadjoint=="D"){
OP = 	[
	[OPff,		  	 0,	     Avf,		      Aaf],
	[   0,		  -shiftOP,	       1,	 		0],
	[   0,		 	 0,	-shiftOP,			1],
	[Afv',		-STIFFNESS,	-DAMPING,	-MASS-shiftOP*eps]
	];
};
else if(iadjoint=="A"||iadjoint=="cA"){
OP = 	[
	[OPff,			0,	       0,		      Afv],
	[   0,	 	 -shiftOP,	       0,	       -STIFFNESS],
	[Avf',	    		1,	-shiftOP,		 -DAMPING],
	[Aaf',			0,	       1,	-MASS-shiftOP*eps]
	];
}*/


//set(OP,solver=sparsesolver);

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//// Eigenvalue calculation process  /////////////////////////////////////////
XXMh<complex> [modex,modey,modep];	// partie "fluide" du vecteur propre
complex modeY,modeV,modeA ; 		// parties "solide" du vecteur propre
complex[int] EVCalculated(nev);		// vector to store eigenvalues
//complex[int,int] EMCalculated(OP.n,nev);// vector to store EIGENVECTORS/MODES

/// SOLUTION AND POSTPROCESSING FOR NEV>1 (built-in eigenvalue solver)
if(nev>1)
{
	if(iadjoint=="D")	{
	OPff=LNSE(XXMh,XXMh,solver=sparsesolver);
	shiftOP=SHIFT;
	OP = 	[
		[OPff,		  	 0,	     Avf,		      Aaf],
		[   0,		  -shiftOP,	       1,	 		0],
		[   0,		 	 0,	-shiftOP,			1],
		[Afv',		-STIFFNESS,	-DAMPING,	-MASS-shiftOP*eps]
		];
	set(OP,solver=sparsesolver);
	typeDA="D";
	 }

	else if(iadjoint=="A")	{
	OPff=LNSEadjointDiscrete(XXMh,XXMh,solver=sparsesolver);
	Afv = conj(Afv);
	shiftOP=conj(SHIFT);
	OP = 	[
		[OPff,			0,	       0,		      Afv],
		[   0,	 	 -shiftOP,	       0,	       -STIFFNESS],
		[Avf',	    		1,	-shiftOP,		 -DAMPING],
		[Aaf',			0,	       1,	-MASS-shiftOP*eps]
		];
	set(OP,solver=sparsesolver);
	typeDA="A";	 
	}


	else if(iadjoint=="S"||iadjoint=="cS") { cout << "Sensivity not supported for nev>1" << endl; cout << 1/zero; }
 	complex[int,int] EMCalculated(OP.n,nev);// vector to store EIGENVECTORS/MODES
	///////////// CALL TO ARPACK++ ////////////////////////////////// //////////
	cout << "Executing Arpack" <<endl; //Ã§a sert Ã  quoi retourner un k? et le ncv ?//Arpack call:
	int k=EigenValue(OP,B,sigma=shiftOP,value=EVCalculated,rawvector=EMCalculated,tol=1e-6,maxit=0,ncv=ncv);
	if(iadjoint=="A") { EVCalculated = conj(EVCalculated); } ;
	cout << "Arpack Finished" << endl;
	//////////////////////////////////////////////////////////////////////
	WriteOutputFiles(EVCalculated,shiftOP,mode,EMCalculated,typeDA,nev,1); //Last number is the iter
} // end if(nev>1)
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED ////////////////////////

else
{

XXMh<complex> [u0x,u0y,u0p],[uxdirect,uydirect,updirect],[uxadjoint,uyadjoint,upadjoint]; 

/*int testCB = exec("ls "+ffdatadir+"Eigenmode_guess.txt");
if (testCB!=0)
{
	cout << "no file Eigenmode_guess.txt : strarting from arbitrary initial condition" << endl;*/
	[u0x,u0y,u0p] = [1,0,0];
/*} 
else
{
	cout << "starting shift/invert from mode in file Eigenmode_guess.txt" << endl;
	ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
	cbin >> ux0[];
};*/

//////////////////////////////////////////////////////////////////////////////
// selection of the computation to be performed: direct, adjoint or both /////
		
int directadjointA,directadjointB;
if(iadjoint=="D")
	{
	directadjointA = 1; directadjointB=1;
	cout << "Shift-invert algorithm for DIRECT problem" << endl;
	}
else if(iadjoint=="A")
	{
	directadjointA = 2; directadjointB=2;
	cout << "Shift-invert algorithm for ADJOINT problem" << endl;
	}
else if(iadjoint=="cA")
	{
	directadjointA = 0; directadjointB=0;
	cout << "Shift-invert algorithm for ADJOINT problem (continuous)" << endl;	
	}
else if(iadjoint=="S")
	{
	directadjointA = 1; directadjointB=2;
	cout << "Shift-invert algorithm for BOTH DIRECT AND ADJOINT(discrete) problem" << endl;
	}
else if(iadjoint=="cS")
	{
	directadjointA = 0; directadjointB=1;
	cout << "Shift-invert algorithm for BOTH DIRECT AND ADJOINT(continuous) problem" << endl;
	};	
//////////////////////////////////////////////////////////////////////////////
// LOOP TO SELECT WHICH COMPUTATION WILL BE DONE
cout << "TOTO10" << endl;
for(int directadjoint=directadjointA;directadjoint<directadjointB+1;directadjoint++)	
{
	if(directadjoint==1)
	{
		cout << " Constructing operator for DIRECT problem ..." << endl;
		OPff=LNSE(XXMh,XXMh,solver=sparsesolver);
		shiftOP=SHIFT;
		OP = 	[
			[OPff,		  	 0,	     Avf,		      Aaf],
			[   0,		  -shiftOP,	       1,	 		0],
			[   0,		 	 0,	-shiftOP,			1],
			[Afv',		-STIFFNESS,	-DAMPING,	-MASS-shiftOP*eps]
			];
		set(OP,solver=sparsesolver);
		typeDA="D";
		
		cout << " solving DIRECT problem ..." << endl;
	}
	else if(directadjoint==2)
	{
		cout << " Constructing operator for ADJOINT(discrete) problem ..." << endl;
		OPff=LNSEadjointDiscrete(XXMh,XXMh,solver=sparsesolver);
		shiftOP=conj(SHIFT) ; 
		Afv = conj(Afv);
		OP = 	[
			[OPff,			0,	       0,		      Afv],
			[   0,	 	 -shiftOP,	       0,	       -STIFFNESS],
			[Avf',	    		1,	-shiftOP,		 -DAMPING],
			[Aaf',			0,	       1,	-MASS-shiftOP*eps]
			];
		set(OP,solver=sparsesolver);
		typeDA="A";

		cout << "solving ADJOINT problem ..." << endl;
	};
	complex[int,int] EMCalculated(OP.n,nev);// vector to store EIGENVECTORS/MODES


	int itmax = 200;
	complex sigma0 = 1e6;
	real err = 1e6;
	real errmax=1e-6;
		
	complex b0A=0; complex b0V = 0; complex b0Y=0; //Les 3 autres variables
	int i; //Also used for testing, later
	
	for (i=0; ((err>errmax)&&(i<itmax)); i++) 
	{ // ITERATION LOOP
		ShiftAndInvertVIV(OP,B,u0,b0,mode,EVCalculated[0],shiftOP,sigma0,err)
		cout << " Iteration: " << i+1 << " : " << endl;
		cout << " Estimated eigenvalue sigma = " << EVCalculated[0] << endl;
	}; // END ITERATION LOOP
	//Normalize by the mode:
	//Xh NormU = sqrt(abs(modex)^2+abs(modey)^2);
	//modex[] = 1/NormU[].max*modex[];
	//modeY = 1/NormU[].max*modeY;	
	//modeV = 1/NormU[].max*modeV;
	//modeA = 1/NormU[].max*modeA;
	
		
	if(directadjoint==1) {uxdirect[]=modex[];}
	else if(directadjoint==2) {uxadjoint[]=modex[];}

	//Normalize by the displacement:
	complex NormU = 2.*modeY; //je multiplie par 2 por faire 0.5 sur na normalization
	modex[] = 1/NormU*modex[];
	modeY = 1/NormU*modeY;	
	modeV = 1/NormU*modeV;
	modeA = 1/NormU*modeA;

	//Normalize by the vorticity:

	//Xh<complex> vort1;
        //vort1=dy(modex)-dx(modey);
	//Xh NormU = abs(vort1);
	//modex[] = 1/NormU[].max*modex[];
	//modeY = 1/NormU[].max*modeY;	
	//modeV = 1/NormU[].max*modeV;
	//modeA = 1/NormU[].max*modeA;

	EMCalculated(:,0)=[modex[],modeY,modeV,modeA];	
	if(iadjoint=="A") { EVCalculated = conj(EVCalculated); } ;

	if(i<itmax) // post-processing if iteration was successful
	{	
		WriteOutputFiles(EVCalculated,shiftOP,mode,EMCalculated,typeDA,nev,i);
		/////////////////////////////////////////////////////////
		////////THE PLOT ////////////////////////////////////////

		fespace p1(th,P1); 
		cout << " Vb : " << modeV << endl;
		//p1 realux = real(modex);
		p1<complex> realux = modex;
		plot(realux,fill=1,value=1,wait=1);
		p1 realuy = real(modey);
		plot(realuy,fill=1,value=1,wait=1);
	cout << "TOTO13" << endl;
	} // end of post-processing of simple shift-invert case

	else{ShiftAndInvertFAIL;};// case iteration failed
	
	/*if (testCB==0)
	{
		exec("rm "+ffdatadir+"Eigenmode_guess.txt");// to be sure this file is not reused unless explicitly requested
	};*/

}; //end of loop for direct/adjoint/selection

cout << "DIOGOOOOOOOOOOOOOOOOOOOOO TOTOTTOTOTTOTOTOTTO" << endl;

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
//SENSITIVITY PART

	if(iadjoint=="S"||iadjoint=="cS")
	//
	{
	cout << "Computation of sensitivity after direct and adjoint" << endl;

	//	cout << "STAT" << uxdirect(2.5,.5) << " " << uxadjoint(2.5,.5) << " " << uydirect(2.5,.5) << " " << uyadjoint(2.5,.5) << endl ;

		//fespace p2(th,P2);fespace p1(th,P1);
		//p2 sensitivity;
		Xh sensitivity;
	
		if(iadjoint=="S") // sensitivity based on DISCERETE ADJOINT 
		{
		sensitivity = sqrt(abs(uxadjoint)^2+abs(uyadjoint)^2) * sqrt(abs(uxdirect)^2+abs(uydirect)^2);
		// at this stage [ux,uy,p] is the last computed, namely the adjoint eigenmode
		real norm = sensitivity[].max;
		sensitivity=1/norm*sensitivity;
		// Flavio is that correct ???
		}
	
		else if(iadjoint=="cS") // sensitivity based on CONTINUOUS ADJOINT 
		{
		sensitivity = sqrt(abs(uxadjoint)^2+abs(uyadjoint)^2) * sqrt(abs(uxdirect)^2+abs(uydirect)^2);
		// at this stage [ux,uy,p] is the last computed, namely the adjoint eigenmode
		real norm = sensitivity[].max;
		sensitivity=1/norm*sensitivity;
		// Flavio is that correct ???
		};




		
		string namefile,namefileFF;
	    namefile=ffdatadir+"Sensitivity.txt";
	    {
	    ofstream file(namefile);
	  	file << sensitivity[] ;	
	    }    
	    namefileFF=ffdatadir+"Sensitivity.ff2m";
		Mh xx,yy,sensitivityP1;
		xx=x;
		yy=y;
	    sensitivityP1 = sensitivity;
		 {
		 ofstream fileFF(namefileFF);
		 fileFF << "### Data generated by Freefem++ ; " << endl;
		 fileFF << "Sensitivity" << endl;
	    	 fileFF << "Format :" << endl;
		     fileFF << "P1 sensitivity" << endl << endl ;
			 for (int j=0;j<sensitivityP1[].n ; j++) fileFF << sensitivityP1[][j] << endl;
		 };



	};// end of  if(iadjoint=="S"||iadjoint=="cS")
}; /// End of SIMPLE SHIFT-INVERT IF ONLY ONE MODE IS RESQUESTED
//END EDP FILE

