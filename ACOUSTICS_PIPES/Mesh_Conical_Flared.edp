verbosity=0;
include "Macros_StabFem.edp";

// cone tronqué

real Rext=20;
real L=10;
real x2 = 12; // longueur théorique du cone
real x1 = x2-L; // distance entre entrée et pointe du cone 
real Rpipe = 1;// rayon en sortie
real Rin = Rpipe*x1/x2;


// LABELS :
// 1 = axis
// 2 = inlet (imposed normal velocity)
// 21 = inlet (imposed pressure)
// 22 = inlet (imposed incident wave)

// 3 = wall (normal velocity = 0)
// 5 = outlet condition (Spherical wave, Sommerfeld)
// 6 = outlet condition (plane wave)
// 7 = 

border axe(t=Rext,-L){x=0;y=t;label=1;};
border fond(t=0,Rin){x=t;y=-L;label=2;};
border mur(t=x1,x2){y=t-x2;x=t*Rin/x1;label=3;};
border plate(t=Rpipe,Rext){x=t;y=0;label=4;};
border sphere(t=0,pi/2){x=Rext*cos(t);y=Rext*sin(t);label=5;};



real d = 12;

plot(axe(d*(L+Rext))+fond(d*Rpipe)+mur(d*L)
                    +plate(d*(Rext-Rpipe))+sphere(pi/2*Rext*d/4));

mesh th = buildmesh(axe(d*(L+Rext))+fond(d*Rpipe)+mur(d*L)
                    +plate(d*(Rext-Rpipe))+sphere(pi/2*Rext*d/4) );
                 

// SAVE THE MESH in mesh.msh file 
savemesh(th,ffdatadir+"mesh.msh");


// FIRST AUXILIARY FILE for Stabfem : SF_Init.ff2m
{
            ofstream file(ffdatadir+"SF_Init.ff2m"); 
			file << "Defininition of problem type and geometrical parameters for StabFem. Problem type : " << endl;
			file << "2D" << endl;
			file << "Format :  (this list may contain geometrical parameters such as domain dimensions, etc..)" << endl;
			file << "real ZERO" << endl;
			file <<  0  << endl;
}


// SECOND AUXILIARY FILE  for Stabfem : mesh.ff2m
	SFWriteMesh(ffdatadir+"mesh.ff2m",th)



// THIRD AUXILIARY FILE for Stabfem : SF_Geom.edp
{
			ofstream file2("SF_Geom.edp"); 
			file2 << "// Description geometry (file automatically created ; to be included in the FreeFem programs)" << endl;
            file2 << " real SFGeomLengthscale = 1 ; // length scale for nondimensionalization" << endl ;
            file2 << " real SFGeomVelocityscale = 1 ; // velocity scale for nondimensionalization " << endl ;
}





// CREATE A guess for the base flow (here starting from zero works very well)
 		fespace femp1(th,P1);
        fespace femp2xfemp2xfemp1(th,[P2,P2,P1]);
        femp2xfemp2xfemp1 [ux,uy,up]=[0,0,0];
        real Re = 0;real nu=1; // these two are useless at this stage but required in the macros 
        
// Save in txt format (for FreeFem)        
      	{
      	ofstream file(ffdatadir+"BaseFlow_guess.txt");
	    file << ux[] << endl;
	    file <<  endl << 0 << endl;
      	}
      	
// Save in ff2m format (for StabFem)	    
	     SFWriteBaseFlow(ffdatadir+"BaseFlow.ff2m");
	     
  