verbosity=0;
int ifplot = 0;

include "Macros_StabFem.edp";

// LABELS :
// 1 = axis
// 2 = inlet (imposed normal velocity)
// 21 = inlet (imposed pressure)
// 22 = inlet (imposed incident wave)

// 3 = wall (normal velocity = 0)
// 5 = outlet condition (Spherical wave, Sommerfeld)
// 6 = outlet condition (plane wave)




mesh th= readmesh("mesh.msh");


complex Qin ;
real k; // nombre d'onde k=omega*c0
		    
fespace VH(th,P2);
VH<complex> f,f1,ftrace;
VH fr,fi,ft,fabs;
complex Zin, Pin;


//////// DEFINITION DU PROBLEME

problem Helmholtz(f,f1) =
         int2d(th)( (-(dx(f)*dx(f1)+dy(f)*dy(f1))+k^2*f*f1)*2*pi*x ) // - grad (phi) * grad(phi1) dV 

       - int1d(th,2)(f1*2*pi*x)  // condition d'entr?e

	   + int1d(th,5)((1i*k-1/sqrt(x^2+y^2))*f*f1*2*pi*x) // condition de sortie de Sommerfeld (a utiliser pour les tuyaux) 
	   + int1d(th,6)(1i*k*f*f1*2*pi*x) // condition de sortie d'onde plane (a utiliser pour les pots d'?chappements)
	   
		  ;


/////// RESOLUTION DU PROBLEME POUR UNE VALEUR DE K ET CALCUL DE L'IMPEDANCE

	cout << " Entrez la valeur de k ?" << endl;
	cin >> k ;
	
	cout << " >>>  k = " << k << endl;
	
	Helmholtz;	
	
	real rho = 1;
	real c = 1;
	real Sin = int1d(th,2)(2*pi*x); // surface d'entr?e
	real Rin = sqrt(Sin/pi);
	real Z0 = rho*c/Sin;// impedance carateristique du tuyau

	Pin = rho*c*1i*k * int1d(th,2)(2*pi*x*f)/Sin; // P = - rho d phi / dt  ; phi = valeur moyenne sur l'entr?e
	Qin = int1d(th,2)(2*pi*x*dy(f));              // Q = int_S  (u.n)  dS 
	Zin = Pin/Qin;
    cout << endl << "Calcul de l'impedance :"  << endl;
	cout << " Inlet impedance Zin = " << Zin << endl << endl;
	real Reflexion = abs((Zin-Z0)/(Zin+Z0))^2;
	cout << " Coef de reflexion = " << Reflexion << endl;

/////// TRACE DE LA STRUCTURE DE L'ONDE ET ANIMATION	
// (appuyez plusieurs fois sur "entr?e" pour passer d'un instant au suivant) 
	
	
//	int flagtrace;
//	cout << " quantite a tracer ? " << endl << "[1 : phi] (utile pour visualiser l'onde a l'interieur du tuyau)"  << endl 
//	<< "[2 : (rs * phi)_ext] (utile pour visualiser l'onde a l'exterieur du tuyau)" << endl; 
//	cin >> flagtrace ;	
//	if(flagtrace==1) ftrace = f;
//	if(flagtrace==2) ftrace = ((y<0)&(x<=Rin)) ? 0 : f*sqrt(x^2+y^2) ;
	

// Fichier de sortie structure sur l'axe
    {
    ofstream fileout("Champs_P_U_Axe.txt");
    VH yy = y;
    VH<complex> pp = 1i*k*f;
    VH<complex> u = dy(f);
    for(real zz=yy[].min; zz<yy[].max; zz=zz+ (yy[].max-yy[].min)/500)
        {
        fileout << zz << " " << real(pp(0,zz)) << " " << imag(pp(0,zz))  
                     << " " << real(u(0,zz)) << " " << imag(u(0,zz)) << endl; 
        }
    }

  string namefile = "AcousticField.ff2m";
  // Fichier de sortie pour STABFEM
  SFWriteMode(namefile,f,k,Zin);   


	
	if(ifplot==1)
	{    
	// ajustement des iso-niveaux a tracer 
	fabs = abs(f);
	real fmax = fabs[].max;
	real[int] viso(21);
	for(int i=0;i<21;i++)viso(i) = (i-10)/10.*fmax;
	
	// calcul et trace de phi a des instants successifs du cycle
		fr = real(f);
	    fi = imag(f);
    cout << " [appuyez plusieurs fois sur entree pour lancer l'animation..]" << endl;   
	for(int i=0;i<32;i++)
		{
			real t = 2*pi*i/16.;
			ft = (fr*cos(t)+fi*sin(t)); // pour tracer phi
			plot(ft,viso=viso,wait=1,value=true,fill=true);
		}
		plot(ft,viso=viso,value=true,fill=true,ps="Champ_Acoustique.eps",wait=1);
	};
	

	
