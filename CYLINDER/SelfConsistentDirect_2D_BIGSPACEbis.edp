/////////////////////////////////////////////////////////////////////////////////
//  PROGRAM SelfConsistentDirect_2D.edp   ///////////////////////////////////////
//	
//  Solves directly the Self-Consistent equations to decribe the limit cycle with 
//	a mean flow and a quasi-linear mode (Mantic-lugo et al)
//   
//  The flow is assumed as an expansion in the form: 	
//	u = u_0 + [ u_{1,c} cos (omega t) + u_{1,s} sin (omega t) ] e^{lambda t}
//  This expansion is equivalent to Mantic-Lugo et al: 
//	u = u_0 + A [U_1 e^{i omega t + sigma t} + cc], 
//		where u_1 is the complex self-consistent mode.											 /////////////// DIOGO a enlevé le "i" sur lambda
//  The connection between both parametrizations is: 
//	u_{1,c} - i u_{1,s} = 2 A u_1,
//		where u_1 is normalised with ||u_1|| = 1/sqrt(2). 
//
/////////////////////////////////////////////////////////////////////////////////
//INPUT PARAMETERS (from keyboard or pipe):
// Re , omega_guess, sigma, typenormalization [,norm] 
//
// The "sigma" parameter is the amplification rate in the SC model of Mantic-Lugo;
//			if zero it reduces to a simple truncated fourier expansion	
//
//INPUT FILES:
// MeanFlow_guess.txt		-> starting field for mean-flow (real) 
// SelfConsistentMode_guess.txt	-> starting field for self-consistent mode (stored
//			 as COMPLEX ; real and imaginary parts are u1,c and -u1,s)
// mesh.msh 			->  mesh in Freefem format
//OUTPUT FILES:
// MeanFlow.txt			-> Converged mean flow (real)
// MeanFlow.ff2m					
// SelfConsistentMode.txt	-> Converged self-consistent mode (stored as  
//						COMPLEX with same convention) 
// SelfConsistentMode.ff2m 
//
//  ERROR MANAGEMENT: 
//      If Newton iteration diverges, SelfConsistentMode.txt is not generated and 
//					"iter" parameter in Eigenmode.ff2m is -1.
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//load "UMFPACK64"
load "MUMPS_seq"
include "SF_Geom.edp";
include "Macros_StabFem.edp";
string copyfile = "yes"; // set to "yes" to copy the output files into the "guess". Better to disable when using in Matlbab driver mode.

/////////////////////////////////////////////////////////////////////////////////
/// Reading Mesh   //////////////////////////////////////////////////////////////
mesh th=readmesh(ffdatadir+"mesh.msh");
//int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6;

/////////////////////////////////////////////////////////////////////////////////
/// Problem Variables   /////////////////////////////////////////////////////////
//fespace Xh(th,P2);             ////// f.e. space for vel.
//fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]  // j'ai besoin à la fin pour ecrire les resultats; voir ecriture MeanFlow.txt
fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]); //For the second way formulation

XXMh [ubx,uby,ubp]; // base flow (start) 
XXMh<complex> [u1x,u1y,u1p];    //eigenmode (start)      
//Mh dumb; // to construct the rhs's    											///DIOGO:		ITS USELESS: TAKE IT OUT

//XXMh [u0x,u0y,u0p],[u1cx,u1cy,u1cp],[u1sx,u1sy,u1sp]; // components 0 (mean flow) and 1 (fundamental, re and im) of HB  
//XXMh [du0x,du0y,du0p],[du1cx,du1cy,du1cp],[du1sx,du1sy,du1sp]; // Increments in Newton
//XXMh [vx,vy,vp]; // test functions

//BIGSPACE [uuubx,uuuby,uuubp,uuu1rx,uuu1ry,uuu1rp,uuu1ix,uuu1iy,uuu1ip]; // THE BIG VARIABLE for the initial guess value
BIGSPACE [uuu0x,uuu0y,uuu0p,uuu1cx,uuu1cy,uuu1cp,uuu1sx,uuu1sy,uuu1sp]; // THE BIG VARIABLE for the state vector
BIGSPACE [duuu0x,duuu0y,duuu0p,duuu1cx,duuu1cy,duuu1cp,duuu1sx,duuu1sy,duuu1sp]; // THE BIG VARIABLE for the Newton increments
BIGSPACE [v1x,v1y,v1p,v2x,v2y,v2p,v3x,v3y,v3p];

real Re, ReM;
real omega, omegaM, sigmaM, domega;
     
////////////////////////////////////////////////////////////////////////////////
/// MACROS /////////////////////////////////////////////////////////////////////
macro div(u) (dx(u#x)+dy(u#y))//EOM macro for divergence

macro Conv(ua,ub,v) ( 
	((ua#x*dx(ub#x)+ua#y*dy(ub#x))+(ub#x*dx(ua#x)+ub#y*dy(ua#x)))*v#x 
	+ ((ua#x*dx(ub#y)+ua#y*dy(ub#y))+(ub#x*dx(ua#y)+ub#y*dy(ua#y)))*v#y 
                    ) //EOM macro for mutual convection operator

macro D(u) [[dx(u#x), .5*(dx(u#y)+dy(u#x))], [.5*(dx(u#y)+dy(u#x)), dy(u#y)]] 
//EOM macro for rate-of-deformation tensor

macro NS(nu,u,v) 
	(
	-2*nu*(D(u):D(v))
        + u#p*div(v)
        + v#p*div(u)
        - .5*Conv(u,u,v)
        )
//EOM
     
macro NSL(nu,U,u,v) 
	(
	-2*nu*(D(u):D(v))
        + u#p*div(v)
        + div(u)*v#p
        - Conv(U,u,v)
        )
//EOM
        
macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	on(bcinlet,u1=0.0,u2=0.0) 
	+ on(bcwall,u1=0.0,u2=0.0)
	+ int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
//EOM 

macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -nu*2*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
// WARNING : HERE IT IS Lift FORCE

macro Drag(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.x)
	+int1d(th,2,21,22,23)( -nu*2*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
// Drag FORCE

macro EnergyNorm(u) sqrt( 2* int2d(th)(abs(u#x)^2+abs(u#y)^2) )
// "Energy" norm for a real or complex field (factor 2 is because the whole domain is two halves)

macro EnergyNormCS(uc,us) sqrt( 2*.5* int2d(th)(abs(uc#x)^2+abs(uc#y)^2+abs(us#x)^2+abs(us#y)^2) )    								///DIOGO doute
// "Energy" norm for a field defined by "cos" and "sin" components (factor 2 because half-domain ; factor .5 because of time-average)

/////////////////////////////////////////////////////////////////////////////////
/// Display Menu   //////////////////////////////////////////////////////////////
real eps=1.e-25;      
real sigma1; // parameter sigma1 from Mantic-lugo et al ; should be zero for harmonic balance
//real A,dA ; // amplitude 

cout << " Choice of Re : " << endl;
cin >> Re; 
cout << " --> Re = " << Re << endl;
real nu=1/Re;

{
real Relu;
cout << "Starting from mean flow in file MeanFlow_guess.txt" << endl;
ifstream cbin(ffdatadir+"MeanFlow_guess.txt");
cbin >> ubx[] >> Relu;
if(Relu!=Re){ cout << "WARNING : Re not equal to that of the guess mean flow" << endl;};
cout << "Drag force of guess mean flow : " << Drag(1/Re,ubx,uby,ubp) << endl;
}

//int check=exec("head -1 "+ffdatadir+"SelfConsistentMode_guess.txt");
//cout << "Check :"<<  check<< endl;

{
cout << "Starting from mode in file SelfConsistentMode_guess.txt" << endl;
ifstream cbin(ffdatadir+"SelfConsistentMode_guess.txt");
cbin >> u1x[] >> ReM >> sigmaM >> omegaM; 
cout << " 			omega of the starting field = " << omegaM<< endl;
cout << "           Fy of the starting field : " << Lift(1/Re,u1x,u1y,u1p) << endl;
cout << "   		Energy-Norm (A) of starting field (complex macro) : " << EnergyNorm(u1)/sqrt(2) << endl;	
}

cout << " Guess for omega ? [-1 -> the one read in the guess file] " << endl; 
cin >> omega ;
if(omega==-1){omega = omegaM;};
cout << " -->  omegaguess = " << omega << endl;


cout << " Choice of sigma1 : [0 for Harmonic balance ; not zero for self-consistent] " << endl; 
cin >> sigma1 ;
cout << " --> sigma1 = " << sigma1 << endl;

string normalisation;
cout << " Normalisation choice ?  [none, L or E]" << endl;
cin >> normalisation ;
cout << " --> " << normalisation << endl;


if(normalisation=="none")
	{ cout << " -> No normalization for the mode " << endl;}
	
else if(normalisation=="L")
	{
		real Liftguess;
		cout << "Value of Lift force Fy for renormalisation ?"<< endl;
		cin >> Liftguess;
		cout << "  -> Fy = " << Liftguess  << endl;

		cout << "Fy before renormalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
		complex modenorm = Lift(1/Re,u1x,u1y,u1p);
		u1x[] = Liftguess/modenorm*u1x[]; // normalize so that lift is 0.5 and Cy 1
		cout << "Fy after renarmalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
		cout << "   ### Energy-norm A = " << EnergyNorm(u1)/sqrt(2) << endl << endl;
	}	
else if(normalisation=="E")
	{
		real Eguess;
		cout << "Value of ENERGY for renormalisation ?"<< endl;
		cin >> Eguess;
		cout << "  -> Energy = " << Eguess << endl;

		cout << "Energy-norm before renormalisation : " << EnergyNorm(u1)/sqrt(2) << endl;
		complex modenorm = Lift(1/Re,u1x,u1y,u1p);
		u1x[] = 1/modenorm*u1x[]; // first normalize so that imag part of lift is zero
		modenorm = EnergyNorm(u1)/sqrt(2);
		u1x[] = Eguess/modenorm*u1x[]; // then normalize so that Energy-norm is specified value
		cout << "Energy-norm after renarmalisation : " << EnergyNorm(u1)/sqrt(2) << endl;	
		cout << "Cy after renarmalisation : " << Lift(1/Re,u1x,u1y,u1p) << endl;
	};

////////////////////////////////////////////////////////////////////////////////
//DEFINIR ICI LE GUESS DU BIGVARIABLE
[uuu0x,uuu0y,uuu0p,uuu1cx,uuu1cy,uuu1cp,uuu1sx,uuu1sy,uuu1sp]=[ubx,uby,ubp,real(u1x), real(u1y), real(u1p),-imag(u1x), -imag(u1y), -imag(u1p)];
cout << "   		Energy-Norm (A) of starting field (real macro) : " << EnergyNormCS(uuu1c,uuu1s) << endl << endl;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for MEAN flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 phase 
// M = 1 MEAN-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega 
//
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//////// varf for BIGSPACE RHS    ///////////////////////////////////////////////
cout << "Constructing RHS: " << endl;
varf NLOpFBIGSPACE ([duuu0x,duuu0y,duuu0p,duuu1cx,duuu1cy,duuu1cp,duuu1sx,duuu1sy,duuu1sp],[v1x,v1y,v1p,v2x,v2y,v2p,v3x,v3y,v3p])=
	/////////////////////////////////////////////////////////////////////////
	// block 1 : NS for base flow        ////////////////////////////////////	
	int2d(th)( NS(nu,uuu0,v1) )
 	+ Boundaryconditions(duuu0x,duuu0y,v1x,v1y,"S")
	+int2d(th)( - .25*Conv(uuu1c,uuu1c,v1) - .25*Conv(uuu1s,uuu1s,v1) )
	/////////////////////////////////////////////////////////////////////////
	// block 2 : base-flow effect on real part of eigenmode	   ////////////// 
	+int2d(th)( NSL(nu,uuu0,uuu1c,v2) )
	- int2d(th) ( sigma1 * (uuu1cx*v2x+uuu1cy*v2y) )
	- int2d(th) ( omega * (uuu1sx*v2x+uuu1sy*v2y ) ) 
	+ Boundaryconditions(duuu1cx,duuu1cy,v2x,v2y,"A")
	/////////////////////////////////////////////////////////////////////////
	// block 3 : base-flow effect on imag part of eigenmode	   //////////////
	+int2d(th)( NSL(nu,uuu0,uuu1s,v3)  )              
	+ Boundaryconditions(duuu1sx,duuu1sy,v3x,v3y,"A")			
	- int2d(th) ( sigma1 * (uuu1sx*v3x+uuu1sy*v3y) )
	+ int2d(th) ( omega * (uuu1cx*v3x+uuu1cy*v3y ) );
	/////////////////////////////////////////////////////////////////////////
	// blocks 4 : fix the phase with imag(lift)
	// this is constructed directly when assemblying the matrix
cout << "RHS construction done. " << endl;

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//////// varf BIG SPACE Linear part     /////////////////////////////////////////
cout << "Constructing Linear part: " << endl;
varf LinOpBIGSPACE ([duuu0x,duuu0y,duuu0p,duuu1cx,duuu1cy,duuu1cp,duuu1sx,duuu1sy,duuu1sp],[v1x,v1y,v1p,v2x,v2y,v2p,v3x,v3y,v3p])=
	// Block 1-1////////////////////////////////////////////////////////
	int2d(th)( NSL(nu,uuu0,duuu0,v1) )        
 	+ Boundaryconditions(duuu0x,duuu0y,v1x,v1y,"S")
	// Block 1-2/////////////////////////////////////////////////////////////
	+int2d(th)( -.5*Conv(uuu1c,duuu1c,v2) )
	// Block 1-3/////////////////////////////////////////////////////////////
	+int2d(th)( -.5*Conv(uuu1s,duuu1s,v3) )
	/////////////////////////////////////////////////////////////////////////
	// Block 2-1/////////////////////////////////////////////////////////////
	+int2d(th)( - Conv(duuu0,uuu1c,v1) )
	// Block 2-2/////////////////////////////////////////////////////////////
	+int2d(th)( NSL(nu,uuu0,duuu1c,v2) )
	- int2d(th)( sigma1*(duuu1cx*v2x+duuu1cy*v2y) )
	+ Boundaryconditions(duuu1cx,duuu1cy,v2x,v2y,"A")
	// Block 2-3/////////////////////////////////////////////////////////////
	+int2d(th)(-omega*(duuu1sx*v3x+duuu1sy*v3y))
	/////////////////////////////////////////////////////////////////////////
	// Block 3-1/////////////////////////////////////////////////////////////
	+int2d(th)( - Conv(duuu0,uuu1s,v1) )
	// Block 3-2/////////////////////////////////////////////////////////////
	+int2d(th)(omega*(duuu1cx*v2x+duuu1cy*v2y))
	// Block 3-3/////////////////////////////////////////////////////////////
	+int2d(th)( NSL(nu,uuu0,duuu1s,v3) )
	- int2d(th) ( sigma1*(duuu1sx*v3x+duuu1sy*v3y) )
//	+int2d(th)((/*duuu0x*v1x+duuu0y*v1y+*/duuu0p*v1p+duuu1cx*v2x+duuu1cy*v2y+duuu1cp*v2p+duuu1sx*v3x+duuu1sy*v3y+duuu1sp*v3p)*1e-7) Pour assurer avoir tout les termes sur la diagonale
	+ Boundaryconditions(duuu1sx,duuu1sy,v3x,v3y,"A");
cout << "Constructing Linear Main part done. " << endl;

varf LinOpColumn4([duuu0x,duuu0y,duuu0p,duuu1cx,duuu1cy,duuu1cp,duuu1sx,duuu1sy,duuu1sp],[v1x,v1y,v1p,v2x,v2y,v2p,v3x,v3y,v3p])=
	/////////////////////////////////////////////////////////////////////////
	// block 2-4 : effect of domega on eigenmode-real equations /////////////
	int2d(th)(-(uuu1sx*v3x+uuu1sy*v3y)) //Pas sur des fonctions tests// this is to be multiplied by domega
	/////////////////////////////////////////////////////////////////////////
	// block 3-4 : effect of domega on eigenmode-imag equations /////////////
	+int2d(th)((uuu1cx*v2x+uuu1cy*v2y));//Pas sur des fonctions tests
cout << "Constructing Linear Colum part done. " << endl;

varf LinOpLine4([v1x,v1y,v1p,v2x,v2y,v2p,v3x,v3y,v3p],[duuu0x,duuu0y,duuu0p,duuu1cx,duuu1cy,duuu1cp,duuu1sx,duuu1sy,duuu1sp])	//ATTENTION inversion
	/////////////////////////////////////////////////////////////////////////
	// bloc 4-3 : to fix the phase by imposing Lift(u1s) = 0
	= Lift(1/Re,duuu1sx,duuu1sy,duuu1sp);
cout << "Constructing Linear Line part done. " << endl;

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///// BEGINING OF NEWTON LOOP FOR BIGSPACEEEEEE   ///////////////////////////////
cout << "Entering in Newton" << endl;
real tolBIGSPACE = 1e-6;
real dddXX = 1;
int iterBIGSPACE=1;
while(abs(dddXX)>tolBIGSPACE&&abs(dddXX)<10000&&iterBIGSPACE<100)
{ 
	//Construct the RHS
	cout << "RHS_1" << endl;
	real[int] RHSBIGSPACE(uuu0x[].n);
	cout << "RHS_2" << endl;
	RHSBIGSPACE = NLOpFBIGSPACE(0,BIGSPACE);
	cout << "RHS_3" << endl;
	real RHSF4BIGSPACE = Lift(1/Re,uuu1sx,uuu1sy,uuu1sp); 
	cout << "RHS_4" << endl;
	real[int] RHS=[RHSBIGSPACE, RHSF4BIGSPACE];
	cout << "RHS_5" << endl;

	//Assembling Matrix
	cout << "Matrix_1" << endl;
	matrix matLinOp = LinOpBIGSPACE(BIGSPACE,BIGSPACE);
	real[int] matLinOpColumn4=LinOpColumn4(0,BIGSPACE);
	real[int] matLinOpLine4 = LinOpLine4(0,BIGSPACE);
	cout << "Matrix_2" << endl;

	matrix LinOpMATRIXBIGSPACE =	[	
						[	matLinOp	,		matLinOpColumn4 ],
						[	matLinOpLine4'	,			eps  	]
					];
	cout << "Matrix_3" << endl;	
	//LU-ing matrix
	cout << "LU_1" << endl;
	set(LinOpMATRIXBIGSPACE,solver=sparsesolver); 			/////////////////////////////////////////Parler à Paul

	//Solving BIG problem...
	cout << "SOLVE_1" << endl;
	real[int] dddX(LinOpMATRIXBIGSPACE.n);
	cout << "SOLVE_2" << endl;
	dddX = LinOpMATRIXBIGSPACE^-1*RHS; 				/////////////////////////////////////////Parler à Paul
	cout << "SOLVE_3" << endl;
	[duuu0x[], domega] = dddX;
	cout << "SOLVE_4" << endl;
	
	uuu0x[] -= duuu0x[];
	omega -= domega;



	cout << endl << "   ### ||delta state vector||, domega: " << duuu0x[].l2 << " " << -domega<< endl;
	dddXX = duuu0x[].l2+abs(domega);
	
	cout << "   ### ||state vector|| (without omega): " << uuu0x[].l2 << endl;

	cout <<  "   ### omega = " << omega << endl;
	cout << "   ### Energy-norm of perturbation A = " << EnergyNormCS(uuu1c,uuu1s)  << endl;	
	cout << " 	### Fy = " << Lift(1/Re,uuu1cx,uuu1cy,uuu1cp) << endl ; 
	//plot(u0x,cmm="mean flow approximation iteration "+iter, fill=1,value=1,wait=0);

	iterBIGSPACE++;
	//if(uuu1cx[].l2<1e-6){dddXX = 1e30; }; // REFAIRE CA
}; // END NEWTON LOOP


if(abs(dddXX)>1000) 
{
	SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",ub,"MeanFlow",-1);
	SFWriteMode(ffdatadir+"SelfConsistentMode.ff2m",u1,1i*omega+sigma1,1i*omegaM+sigma1,"HarmonicMode",-1);
	cout << endl << endl << "#####################################################################@" << endl << endl;
	cout << " Newton Loop DIVERGED " << endl;	
}
	
else
{
	cout << endl << endl << "#####################################################################@" << endl << endl
	     << "HB MODEL : Newton Loop converged in " << iterBIGSPACE << " iterations " << endl;
	cout << " >>> Omegac = " << omega << endl;	
	cout << " >>> Energy of perturbation A = " << EnergyNormCS(uuu1c,uuu1s)  << endl;	
	cout << " >>> Fy = " << Lift(1/Re,uuu1cx,uuu1cy,uuu1cp) << endl ; 

	/////////////////////////////////////////////////////////////////////////////////
	/// GENERATES OUTPUT FILES //////////////////////////////////////////////////////
	//Champs  sert seulement à garder les 3 champs du vecteur BIGSPACE uuu0x[] separament pour apres aller l'ecrire sur le file
	XXMh [u0x,u0y,u0p],[u1cx,u1cy,u1cp],[u1sx,u1sy,u1sp];
	[u0x[],u1cx[],u1sx[]]= uuu0x[];

	{
		ofstream file(ffdatadir+"MeanFlow.txt");
		file << u0x[];
		file << endl << endl << Re;
	}; 

	SFWriteBaseFlow(ffdatadir+"MeanFlow.ff2m",u0,"MeanFlow",iterBIGSPACE);

	[u1x,u1y,u1p] = [u1cx-1i*u1sx,u1cy-1i*u1sy,u1cp-1i*u1sp]; 

	{
 		ofstream file(ffdatadir+"SelfConsistentMode.txt");
 	  	file << u1x[] ;	
 	  	file << endl << endl << Re << endl
 		  	<< endl << sigma1 << "   " << omega  << endl;
	};


	SFWriteMode(ffdatadir+"SelfConsistentMode.ff2m",u1,1i*omega+sigma1,1i*omega+sigma1,"HarmonicMode",iterBIGSPACE);

	if(copyfile=="yes")
	{
	cout << " COPYING Output into guess for next calculation..." << endl; 
	{
		ofstream file(ffdatadir+"MeanFlow_guess.txt");
		file << u0x[]; 
		file << endl << endl << Re;
	};
	{
 		ofstream file(ffdatadir+"SelfConsistentMode_guess.txt");
   		file << u1x[] ;	
   		file << endl << endl << Re << endl
   			<< endl << sigma1 << "   " << omega  << endl;
	};
	};

};
	
// END PROGRAM

