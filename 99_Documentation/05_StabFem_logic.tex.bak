
\section{How a StabFem project works}

A \ti{StabFem} project have a directory, for example \menu{StabFemm>CYLINDER} where it can be found:
\begin{enumerate}
\item The \texttt{*.m} corresponding to the \ti{Matlab} scripts. Normally, a main scritp can be found, e.g. \keys{SCRIPT\_CYLINDER\_DEMO.m}. ;
\item A directory \menu{StabFemm>CYLINDER > WORK} (if not, it will be created when \ti{Matlab} script run) where it can be found the output data;
\item All the \texttt{*.edp} specific to the project and to be excecuted automatically by the \ti{Matlab} interface. E.g.: The \keys{Mesh*.edp}, the \keys{Macros\_StabFem.edp}, \keys{Param\_Adaptmesh.edp}, etc.
\end{enumerate}



\subsection{Running logic of a \ti{StabFem} project}


When one executes the main script \texttt{*.m} the following steps done:

\begin{enumerate}
\item Launch \keys{SF\_Start.m}:
\begin{lstlisting}
run('../SOURCES_MATLAB/SF_Start.m');
\end{lstlisting}
creating the following directories as global variables and adding the sfdir to the \ti{matlab} paths:
\begin{lstlisting}
ff = '/PRODCOM/Ubuntu16.04/freefem/3.51/gcc-5.4-mpich_3.2/bin/FreeFem++'; % on IMFT network
sfdir = '~/StabFem/SOURCES_MATLAB/'; % where to find the matlab drivers
ffdir = '~/StabFem/SOURCES_FREEFEM/'; % where to find the freefem scripts
ffdatadir = './WORK/';
addpath(sfdir);
\end{lstlisting}
It also creates the \keys{SF\_Geom.edp} need for \ti{FreeFemm++}.

\item Then, a mesh and a baseflow are generated for the project with the help of \keys{SF\_Init.edp} located in \menu{StabFemm>SOURCES\_MATLAB},e.g.:

\begin{lstlisting}
baseflow=SF_Init('Mesh_Cylinder.edp', [-40 80 40]);
\end{lstlisting}

The detailed input/output parameters are discussed in next chapter (\textcolor{red}{To do...}). It will execute \keys{Mesh.edp} and generate in the current path the \keys{mesh.msh}, \keys{mesh.ff2m}, \keys{mesh\_init.msh},\keys{SF\_Init.ff2m}, \keys{BaseFlow\_init.txt} and \keys{BaseFlow\_init.ff2m}. 

The path \menu{StabFemm>CYLINDER > WORK>BASEFLOWS} is created. This is where all the base flow for the different Reynolds numbers will be stored.



\item The baseflows for for different parameters ($Re$, Porosity,...) are gerenated by the command: 
\begin{lstlisting}
baseflow=SF_BaseFlow(baseflow,'Re',10);
\end{lstlisting}
executing the commum scritpt \keys{SF\_BaseFlow.m}. This script will read the \ti{baseflow.mesh.problemtype} parameter and execute the corresponding Newton routing \texttt{Newton*.edp} located at \menu{StabFemm>SOURCES\_FREEFEM} in order to gerenrate the corresponding baseflows in their path.


\item Then, a adaptation of the mesh is made to raffinate and converge the results for the corrent baseflow, with the following command:
\begin{lstlisting}
baseflow=SF_Adapt(baseflow,'Hmax',10,'InterpError',0.005);
\end{lstlisting}
The raffination parameters are writen in \keys{Param\_Adaptmesh.edp}\textcolor{red}{(why?)} in the current path. \keys{Adapt\_Mode.edp} is executed from ffdir to raffinate the mesh. \textcolor{red}{(Some files are created...explain...)}

\item A mesh adaptation taking into acount the eigenmode can be done: for that, first a solution have to be commuted first giving the eigenmodes. Then the mesh adaptation can be done like it was done in last step. 
\begin{lstlisting}
[ev,em] = SF_Stability(baseflow,'shift',0.04+0.74i,'nev',1,'type','D');
[baseflow,em]=SF_Adapt(baseflow,em,'Hmax',10,'InterpError',0.01);
\end{lstlisting}

Here, the eigenvalueproblem has been solved with a shitf-and-invert iteration process, detail in next chapter(\textcolor{red}{(to do)}). \keys{SF\_Stability.m} is once again located at sfdir.

\item After the former step, once wisely used, post-processing can be made. At that stage, each project have its particularaties and it will be detailed in their dedicated chapter.



\end{enumerate}

\subsection{Create a \ti{StabFem} project}

In order to create a project in \ti{StabFem} one has to start to code the scripts in \ti{FreeFEM++}.

\medskip

\begin{leftbar}
Attention:  When creating the different \texttt{*.edp} files, one has to pay attention on the compulsory inputs and output of the \ti{Matlab} interface.
\end{leftbar}

Then, the \ti{Mathlab} scripts, a lot in the previously presented style have to be created.

\medskip

\begin{leftbar}
Attention:  The different \texttt{*.m} files created in the particular directory will be used only in your project, so you can used them as one likes; but, once commum files used, they must not be changed without carefull examination of the implication on the other projects.
\end{leftbar}


Communly, the following files are needed in the current file:

\paragraph{\ti{FreeFEM++} file: SCRIPT\_*.edp}

Here, the problem is defined. It can be a eigenvalue problem, a forced problem, etc. To define the problem, see the FreeFEM++ documentation \cite{FFdoc}\footnote{http://www.freefem.org/ff++/ftp/freefem++doc.pdf}.

\paragraph{\ti{FreeFEM++} file: Mesh\_*.edp}

File where the mesh of the problem and the convinead files are generated.

\paragraph{\ti{FreeFEM++} file: Macros\_StabFem.edp}

Macros are a powerfull tool in \ti{FreeFEM++}. In this file all the Macros specific of the project are created. This macros will be used both by the \texttt{*.edp} scripts of one's problem and by the  commum scripts located at \menu{StabFemm>SOURCES\_FREEFEM}. 


\paragraph{\ti{Matlab} file: mainscript.m}

This script will be organise like in the previously presented style. Then, the a  different treatement is given to each problem, and one can be inspired by the project already created.



